# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import re

# ls neutrino/tests/c -1 | grep \\.c | sort
test_file_names = [
  "test_alloc.c",
  "test_behavior.c",
  "test_bind.c",
  "test_crash.c",
  "test_derived.c",
  "test_freeze.c",
  "test_globals.c",
  "test_heap.c",
  "test_interp.c",
  "test_method.c",
  "test_ook.c",
  "test_plankton.c",
  "test_process.c",
  "test_runtime.c",
  "test_safe.c",
  "test_syntax.c",
  "test_tagged.c",
  "test_test.c",
  "test_utils.c",
  "test_value.c"
]

# Compile a single test file, ensuring that the include paths are hooked up
# right.
def compile_test_file(source):
  # Include the C sources.
  source.add_include(get_root().get_child('src', 'c'))
  # Also include the c test folder in the bin directory since that's where the
  # TOC file is going to land.
  source.add_include(get_bindir().get_child('tests', 'c'))
  return source.get_object()

# Create a group containing the test files along with the runtime library.
test_library = get_group("library")
test_library.add_dependency(get_external('src', 'c', 'library'))

# Generate the test table-of-contents using the custom generator.
toc_file = toc.get_toc_file("toc.c")
toc_file.set_generator(get_root().get_child('src', 'python', 'build', 'toc.py'))

# Compile the test source files and include them in the TOC.
for test_file_name in test_file_names:
  test_file = c.get_source_file(test_file_name)
  toc_file.add_test(test_file)
  object_file = compile_test_file(test_file)
  test_library.add_member(object_file)

main_file_names = [
  "test.c"
]

# Compile the test main executable.
test_main = c.get_executable("main")
test_main.add_object(test_library)
for main_file_name in main_file_names:
  main_file = c.get_source_file(main_file_name)
  object_file = compile_test_file(main_file)
  # Let the main files depend on toc.c but don't try to compile it directly
  # since it's going to be #included into test.c.
  object_file.add_dependency(toc_file)
  test_main.add_object(object_file)

run_tests = get_group("run-tests")

# Add targets to run the test cases.
for test_file_name in test_file_names:
  test_case = test.get_exec_test_case(test_file_name)
  test_case.set_runner(test_main)
  stripped_test_case_name = re.match(r"test_(\w+).c", test_file_name).group(1)
  test_case.set_arguments(stripped_test_case_name)
  run_tests.add_member(test_case)
