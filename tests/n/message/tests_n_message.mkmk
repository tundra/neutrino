# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import os.path
import plankton.options

file_names = [
  "assert_equals_failure",
  "assert_that_failure",
  "trace_builtin_leave",
  "trace_explicit_leave",
  "trace_leave_ensure",
]

suite = get_group("suite")
compiler = get_external("src", "python", "neutrino", "main.py")
tester = wrap_source_file(get_root().get_child("src", "sh", "run-message-test.py"))
runner = get_external("src", "c", "ctrino")
modules = get_external("src", "n", "files")
library = get_external("src", "n", "library")

for file_base in file_names:
  file_name = "%s.n" % file_base
  # Compile the source file to a library.
  source_file = n.get_source_file(file_name)
  (filename, ext) = os.path.splitext(file_name)
  program = n.get_program(filename)
  program.set_compiler(compiler)
  program.add_source(source_file)
  program.add_module(modules)
  # Get the expected output
  output_file = get_source_file("%s.out" % file_base)
  # Run the test
  test_case = test.get_exec_test_case(file_name)
  suite.add_member(test_case)
  opts = plankton.options.Options()
  opts.add_flag("module_loader", {
    "libraries": [library.get_output_path()]
  })
  test_case.set_runner(tester)
  test_case.set_arguments(output_file.get_input_file().get_path(),
    runner.get_output_path(), program.get_output_path(), "--main-options",
    opts.base64_encode())
  test_case.add_dependency(program)
  test_case.add_dependency(library)
  test_case.add_dependency(output_file)
  # Create a shorthand for running this test case.
  shorthand = add_alias("run-message-%s" % filename)
  shorthand.add_member(test_case)
