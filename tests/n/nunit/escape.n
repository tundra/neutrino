# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def $test_simple_escape() {
  $assert:equals(0, with_escape $break do 0);
  $assert:equals(2, with_escape $break do 1 + 1);
  $assert:equals(3, with_escape $break do $break(3));
  $assert:equals(4, with_escape $break do $break(4));
  $assert:equals(5, with_escape $break do { $break(5); 6; });
  $assert:equals(8, with_escape $break do { 7; $break(8); 9; });
  $assert:equals(11, with_escape $break do { 10; $break(11); $assert:fail(); });
}

## Calls recursively $n times, then calls the thunk with the argument 10.
def $call_at_n($i, $n, $thunk) =>
  if $i < $n
    # Ensure that the call is not in a tail position by having it in a sequence.
    then { $call_at_n($i + 1, $n, $thunk); $i; }
    else $thunk($n);

def $test_deep_escape() {
  $assert:equals(10, with_escape $break do $call_at_n(0, 10, $break));
  $assert:equals(11, with_escape $break do { $call_at_n(0, 11, $break); 12; });
  $assert:equals(100, with_escape $break do $call_at_n(0, 100, $break));
}

def $test_direct_kill() {
  $assert:equals(true, with_escape $break do $break.is_live?);
  $assert:equals(true, with_escape $break do $break($break.is_live?));
  $assert:equals(false, (with_escape $break do $break).is_live?);
  $assert:equals(false, (with_escape $break do $break($break)).is_live?);
  var $e := null;
  with_escape $break do {
    $e := $break;
    $assert:equals(true, $e.is_live?);
  }
  $assert:equals(false, $e.is_live?);
  var $f := null;
  with_escape $break do {
    $f := $break;
    $assert:equals(true, $f.is_live?);
    $break(null);
  }
  $assert:equals(false, $f.is_live?);  
}

## Call recursively $n - $i times then capture an escape, do a recursive call,
## and fire the escape. This is intended to test that escaping work across stack
## segments.
def $escape_at_n($i, $n) {
  if $i < $n then {
    $escape_at_n($i + 1, $n);
    $i;
  } else {
    with_escape $break
      do $call_at_n(0, 2, $break);
  }
}

def $test_various_depth_escape() {
  # TODO: increase the number of iterations when the interpreter is faster.
  for $i in (0).to(30) do {
    $escape_at_n(0, 5 * $i);
  }
}

def $test_nested_escape() {
  var $outer := null;
  var $inner := null;
  with_escape $o do {
    $outer := $o;
    with_escape $i do {
      $inner := $i;
      $assert:that($inner.is_live?);
      $assert:that($outer.is_live?);
    }
  }
  $assert:not($inner.is_live?);
  $assert:not($outer.is_live?);
  with_escape $o do {
    $outer := $o;
    with_escape $i do {
      $inner := $i;
      $outer(null);
    }
  }
  $assert:not($inner.is_live?);
  $assert:not($outer.is_live?);
  with_escape $o do {
    $outer := $o;
    try {
      with_escape $i do {
        $inner := $i;
        try {
          $o(null);
        } ensure {
          $assert:that($inner.is_live?);
          $assert:that($outer.is_live?);
        }
      }
    } ensure {
      $assert:not($inner.is_live?);
      $assert:that($outer.is_live?);
    }
  }
}

def $test_interrupted_escape() {
  var $escaped := null;
  with_escape $outer do {
    $assert:equals(11, with_escape $inner do {
      try {
        $outer(10);
      } ensure {
        $inner(11);
      }
    });
    $escaped := false;
    $assert:that($outer.is_live?);
  }
  $assert:not($escaped);
}

do {
  $test_simple_escape();
  $test_direct_kill();
  $test_deep_escape();
  $test_various_depth_escape();
  $test_nested_escape();
  $test_interrupted_escape();
  # TODO: check that
  #   - escaping fails if called from a different process.
}
