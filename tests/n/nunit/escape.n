# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def $test_simple_escape() {
  $assert:equals(0, with_escape $break do 0);
  $assert:equals(2, with_escape $break do 1 + 1);
  $assert:equals(3, with_escape $break do $break(3));
  $assert:equals(4, with_escape $break do $break(4));
  $assert:equals(5, with_escape $break do { $break(5); 6; });
  $assert:equals(8, with_escape $break do { 7; $break(8); 9; });
}

# Calls recursively 10 times, then calls the thunk with the argument 10.
def $call_at_10($n, $thunk) => 
  if $n < 10
    then $call_at_10($n + 1, $thunk)
    else $thunk($n);

def $test_deep_escape() {
  $assert:equals(10, with_escape $break do $call_at_10(0, $break));
  $assert:equals(10, with_escape $break do { $call_at_10(0, $break); 11; });
}

def $main() {
  $test_simple_escape();
  $test_deep_escape();
  # TODO: check that
  #   - escapes are killed appropriately.
  #   - this works for really deep stacks (that is, across segments).
  #   - escaping fails if called from a different process.
}

entry_point $main();
