# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def $test_simple_escape() {
  $assert:equals(0, with_escape $break do 0);
  $assert:equals(2, with_escape $break do 1 + 1);
  $assert:equals(3, with_escape $break do $break(3));
  $assert:equals(4, with_escape $break do $break(4));
  $assert:equals(5, with_escape $break do { $break(5); 6; });
  $assert:equals(8, with_escape $break do { 7; $break(8); 9; });
}

## Calls recursively $n times, then calls the thunk with the argument 10.
def $call_at_n($i, $n, $thunk) =>
  if $i < $n
    # Ensure that the call is not in a tail position by having it in a sequence.
    then { $call_at_n($i + 1, $n, $thunk); $i; }
    else $thunk($n);

def $test_deep_escape() {
  $assert:equals(10, with_escape $break do $call_at_n(0, 10, $break));
  $assert:equals(11, with_escape $break do { $call_at_n(0, 11, $break); 12; });
  $assert:equals(100, with_escape $break do $call_at_n(0, 100, $break));
}

def $main() {
  $test_simple_escape();
  $test_deep_escape();
  # TODO: check that
  #   - escapes are killed appropriately.
  #   - escaping fails if called from a different process.
}

entry_point $main();
