# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;

# A method that does something, anything.
def $test_simple_local_functions() {
  def $v0 := (bk $foo($x) => ($x + 1) in $foo(3) + $foo(4));
  $assert:equals(9, $v0);
  def $v1 := (bk $foo() => null in {
    $assert:that($foo.is_live);
    $foo;
  });
  $assert:not($v1.is_live);
}

def $test_nested_outers() {
  # Capturing an outer.
  def $v2 := {
    def $x := 4;
    bk $foo() => $x in $foo()
  }
  $assert:equals(4, $v2);
  # Accessing an outer by calling an outer local lambda.
  def $v3 := {
    def $x := 5;
    bk $foo() => $x in {
      bk $bar() => $foo() in {
        $bar();
      }
    }
  }
  $assert:equals(5, $v3);
  # Accessing a outer's outer.
  def $v4 := {
    def $x := 6;
    bk $foo($v) => $v in {
      bk $bar($w) => $foo($w) in {
        $bar($x);
      }
    }
  }
  $assert:equals(6, $v4);
  # Insanity
  def $v5 := {
    def $x := 7;
    bk $foo($thunk) => $thunk() in {
      bk $bar() => $x in {
        $foo($bar);
      }
    }
  }
  $assert:equals(7, $v5);
}

do {
  $test_simple_local_functions();
  $test_nested_outers();
}
