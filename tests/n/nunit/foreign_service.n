# Copyright 2015 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def $test_time() {
  def $current_p := @core:time->current;
  $assert:not($current_p.is_settled?);
  $current_p.then(fn $value => $assert:that($value > 0));
}

def $test_unknown() {
  $assert:equals(op.blargh(), try @core:time->blargh() on.unknown_foreign_method($s) => $s);
}

def $test_echo() {
  def $run := fn ($in) {
    # Test round-tripping a single argument through a remote call.
    @core:echo->echo($in).then(fn $out => $assert:equals($in, $out));
    @ctrino.collect_garbage!();
  }
  $run(946);
  $run("hey");
  $run("oof!");
  $run(true);
  $run(false);
  $run(null);
  $run([]);
  $run([1, 2, 3]);
  $run([1, [2, [3, [4]]]]);
  $run(op.foo());
  $run({});
}

# Chained calls to the echo service.
def $step_echo_chain($n) {
  @core:echo->echo($n).then(fn $v {
    $assert:equals($n, $v);
    if $v == 0
      then 0;
      else $step_echo_chain($v - 1);
  });
}

def $test_echo_chain() {
  $step_echo_chain(1000);
}

do {
  $test_time();
  $test_echo();
  $test_unknown();
  $test_echo_chain();
}
