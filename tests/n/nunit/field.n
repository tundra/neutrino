# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;

def @manager := @ctrino.new_instance_manager(null);
def @Point := module.new_type("Point");
def @x := @ctrino.new_global_field("x");
def @y := @ctrino.new_global_field("y");

def $test_raw_field_access() {
  def $p := @manager.new_instance(@Point);
  @x[$p] := 0;
  @y[$p] := 0;
  $assert:equals(0, @x[$p]);
  $assert:equals(0, @y[$p]);
  @x[$p] := 1;
  $assert:equals(1, @x[$p]);
  $assert:equals(0, @y[$p]);
  @y[$p] := 2;
  $assert:equals(1, @x[$p]);
  $assert:equals(2, @y[$p]);
}

def ($this is @Point).x => @x[$this];
def ($this is @Point).x := ($v) => @x[$this] := $v;
def ($this is @Point).y => @y[$this];
def ($this is @Point).y := ($v) => @y[$this] := $v;

def $test_field_accessors() {
  def $p := @manager.new_instance(@Point);
  $p.x := 0;
  $p.y := 0;
  $assert:equals(0, $p.x);
  $assert:equals(0, $p.y);
  $p.x := 1;
  $assert:equals(1, $p.x);
  $assert:equals(0, $p.y);
  $p.y := 2;
  $assert:equals(1, $p.x);
  $assert:equals(2, $p.y);
}

def ($this == @Point).new(x: $x, y: $y) {
  def $result := @manager.new_instance($this);
  $result.x := $x;
  $result.y := $y;
  $result;
}

def $test_constructor() {
  def $p0 := new @Point(10, 11);
  $assert:equals(10, $p0.x);
  $assert:equals(11, $p0.y);
  def $p1 := new @Point(x: 3, y: 4);
  $assert:equals(3, $p1.x);
  $assert:equals(4, $p1.y);
  def $p2 := new @Point(y: 32, x: 35);
  $assert:equals(35, $p2.x);
  $assert:equals(32, $p2.y);
}

do {
  $test_raw_field_access();
  $test_field_accessors();
  $test_constructor();
}
