# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import os.path
import plankton.options

file_names = [
  "alloc.n",
  "annot.n",
  "anything.n",
  "array.n",
  "async.n",
  "block_arguments.n",
  "block_liveness.n",
  "block_locals.n",
  "block_simple.n",
  "block_vars.n",
  "bool.n",
  "builtin_signals.n",
  "call_literals.n",
  "call_literal_invoke.n",
  "def.n",
  "delay.n",
  "ensure.n",
  "escape.n",
  "field.n",
  "float32.n",
  "for.n",
  "function.n",
  "functino_multis.n",
  "functino_selectors.n",
  "hanoi.n",
  "hash.n",
  "if.n",
  "integer.n",
  "interval.n",
  "is.n",
  "lambda.n",
  "leave.n",
  "module.n",
  "object.n",
  "plugin.n",
  "promise.n",
  "selector.n",
  "signal.n",
  "stages.n",
  "string.n",
  "tags.n",
  "trace.n",
  "tuple.n",
  "var.n",
  "while.n",
]

suite = get_group("suite")
compiler = get_external("src", "python", "neutrino", "main.py")
runner = get_external("src", "c", "ctrino")
modules = get_external("src", "n", "files")
library = get_external("src", "n", "library")

for file_name in file_names:
  # Compile the source file to a library.
  source_file = n.get_source_file(file_name)
  (filename, ext) = os.path.splitext(file_name)
  program = n.get_program(filename)
  program.set_compiler(compiler)
  program.add_source(source_file)
  program.add_module(modules)
  # Run the test
  test_case = test.get_exec_test_case(file_name)
  suite.add_member(test_case)
  opts = plankton.options.Options()
  opts.add_flag("module_loader", {
    "libraries": [library.get_output_path()]
  })
  test_case.set_runner(runner)
  test_case.set_arguments(program.get_output_path(), "--main-options", opts.base64_encode())
  test_case.add_dependency(program)
  test_case.add_dependency(library)
  # Create a shorthand for running this test case.
  shorthand = add_alias("run-nunit-%s" % filename)
  shorthand.add_member(test_case)
