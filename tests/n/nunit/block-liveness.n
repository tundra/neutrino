# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def $test_killing() {
  var $bk0 := null;

  # Normal exit
  bk $foo() => 8 in {
    $bk0 := $foo;
    $assert:that($bk0.is_live);
  }
  $assert:not($bk0.is_live);

  # Escaping one level.
  with_escape $e do {
    bk $foo() => 9 in {
      $bk0 := $foo;
      $assert:that($bk0.is_live);
      $e(null);
    }
  }
  $assert:not($bk0.is_live);

  # Escaping multiple levels.
  var $bk1 := null;
  var $bk2 := null;
  with_escape $e do {
    bk $f0() => 9 in {
      $bk0 := $f0;
      bk $f1() => 10 in {
        $bk1 := $f1;
        bk $f2() => 11 in {
          $bk2 := $f2;
          $assert:that($bk0.is_live);
          $assert:that($bk1.is_live);
          $assert:that($bk2.is_live);
          $e(null);
        }
      }
    }
  }
  $assert:not($bk0.is_live);
  $assert:not($bk1.is_live);
  $assert:not($bk2.is_live);

  # Let's get crazy; interaction with ensure blocks.
  var $step := 0;
  with_escape $e do {
    try {
      bk $f0() => 9 in {
        try {
          $bk0 := $f0;
          bk $f1() => 10 in {
            try {
              $bk1 := $f1;
              bk $f2() => 11 in {
                try {
                  $bk2 := $f2;
                  $assert:that($bk0.is_live);
                  $assert:that($bk1.is_live);
                  $assert:that($bk2.is_live);
                  $e(null);
                } ensure {
                  $assert:equals(1, $step := $step + 1);
                  $assert:that($bk0.is_live);
                  $assert:that($bk1.is_live);
                  $assert:that($bk2.is_live);
                }
              }
              $assert:fail();
            } ensure {
              $assert:equals(2, $step := $step + 1);
              $assert:that($bk0.is_live);
              $assert:that($bk1.is_live);
              $assert:not($bk2.is_live);
            }
            $assert:fail();
          }
        } ensure {
          $assert:equals(3, $step := $step + 1);
          $assert:that($bk0.is_live);
          $assert:not($bk1.is_live);
          $assert:not($bk2.is_live);
        }
        $assert:fail();
      }
    } ensure {
      $assert:equals(4, $step := $step + 1);
      $assert:not($bk0.is_live);
      $assert:not($bk1.is_live);
      $assert:not($bk2.is_live);
    }
    $assert:fail();
  }
  $assert:equals(4, $step);
  $assert:not($bk0.is_live);
  $assert:not($bk1.is_live);
  $assert:not($bk2.is_live);

}

do {
  $test_killing();
}
