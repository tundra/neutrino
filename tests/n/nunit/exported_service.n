# Copyright 2015 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def $test_wrapping() {
  def $str := "foo".view(@core:Ascii);
  def $foo := new @core:fsi:ExportedService($str, module);
  $foo->length.then(fn $v => $assert:equals(3, $v));
}

type @Helper {

  def $this.step($n) {
    @ctrino.collect_garbage!;
    $n * $n;
  }

  def $this.echo($v) => $v;

}

def $next_step($service, $n) {
  if $n < 20 then {
    def $p := $service->step($n);
    @ctrino.collect_garbage!;
    $p.then(fn $v {
      $assert:equals($n * $n, $v);
      $next_step($service, $n + 1);
    });
  }
}

def $test_gc_safe() {
  def $helper := @ctrino.new_instance_manager(null).new_instance(@Helper);
  def $service := new @core:fsi:ExportedService($helper, module);
  $next_step($service, 0);
}

def $test_roundtrip() {
  def $helper := @ctrino.new_instance_manager(null).new_instance(@Helper);
  def $service := new @core:fsi:ExportedService($helper, module);
  def $run := fn ($in) {
    def $out_p := $service->echo($in).then(fn $out => $assert:equals($in, $out));
    @ctrino.collect_garbage!;
  }
  $run(946);
  $run("hey");
  $run("oof!");
  $run(true);
  $run(false);
  $run(null);
  $run([]);
  $run([1, 2, 3]);
  $run([1, [2, [3, [4]]]]);
  $run({});
}

do {
  $test_wrapping();
  $test_gc_safe();
  $test_roundtrip();
}
